# pylint: disable=logging-fstring-interpolation,fixme
"""Crucible is a ingestion class that is used to process a cleaned dictionary from the smelter
and prepare it for ingestion into MyTardis. The concrete IngestionFactory class that is used
will call the crucible after ensuring that an object is whitelisted for ingestion."""

import logging
from copy import deepcopy
from typing import Union

from src.overseers import overseer

logger = logging.getLogger(__name__)


class Crucible:
    """Crucible class to process dictionaries after they have been smelted from the raw data
    and not matched by the Ingestion Factory.

    Attributes:
        self.overseer: An instance of the Overseer class
        self.mytardis_setup: The return from the introspection API that specifies how MyTardis is
            up Set.
    """

    def __init__(
        self,
        config_dict: dict,
    ) -> None:
        """Initialises the Crucible with the configuration found in config_dict."""
        self.overseer = Overseer(config_dict)
        self.mytardis_setup = self.overseer.get_mytardis_set_up()
        config_dict.update(self.mytardis_setup)

    def prepare_project(
        self,
        object_dict: dict,
    ) -> Union[dict, None]:
        """Function to replace the object identifiers in the project object dictionary with URIs
        from MyTardis.

        Args:
            object_dict: the object dictionary generated by the smelter class

        Returns:
            The object dictionary with idenifiers replace by their equivalent URIs or None
                if an error was encountered.
        """
        prepared_dict = deepcopy(object_dict)
        institutions = []
        for institution in prepared_dict["institution"]:
            institutions.append(
                self.overseer.get_object_uri(
                    "institution",
                    institution,
                )
            )
        prepared_dict["institution"] = list(
            set([item for sublist in institutions for item in sublist])
        )
        # TODO error checking here log and return empty dict
        return prepared_dict

    def prepare_experiment(
        self,
        object_dict: dict,
    ) -> Union[dict, None]:
        """Function to replace the object identifiers in the experiment object dictionary with URIs
        from MyTardis.

        Args:
            object_dict: the object dictionary generated by the smelter class

        Returns:
            The object dictionary with idenifiers replace by their equivalent URIs or None
                if an error was encountered.
        """
        prepared_dict = deepcopy(object_dict)
        if self.mytardis_setup["projects_enabled"]:
            project_id = prepared_dict["projects"]
            if isinstance(project_id, str):
                project_id = [project_id]
            projects = []
            for project in project_id:
                projects.append(self.overseer.get_object_uri("project", project))
            prepared_dict["projects"] = list(
                set([item for sublist in projects for item in sublist])
            )
        # TODO error checking here and log return empty dict
        return prepared_dict

    def prepare_dataset(
        self,
        object_dict: dict,
    ) -> Union[dict, None]:
        """Function to replace the object identifiers in the dataset object dictionary with URIs
        from MyTardis.

        Args:
            object_dict: the object dictionary generated by the smelter class

        Returns:
            The object dictionary with idenifiers replace by their equivalent URIs or None
                if an error was encountered.
        """
        prepared_dict = deepcopy(object_dict)
        experiments = []
        experiment_id = prepared_dict["experiments"]
        if isinstance(experiment_id, str):
            experiment_id = [experiment_id]
        for experiment in experiment_id:
            experiments.append(self.overseer.get_object_uri("experiment", experiment))
        prepared_dict["experiments"] = experiments
        # TODO error checking here and log return empty dict
        instrument_id = prepared_dict["instrument"]
        instruments = self.overseer.get_object_uri("instrument", instrument_id)
        # TODO check only single instrument returned log error and return None if not
        prepared_dict["instrument"] = instruments[0]
        return prepared_dict

    def prepare_datafile(
        self,
        object_dict: dict,
    ) -> Union[dict, None]:
        prepared_dict = deepcopy(object_dict)
        """Function to replace the object identifiers in the datafile object dictionary with URIs
        from MyTardis.

        Args:
            object_dict: the object dictionary generated by the smelter class

        Returns:
            The object dictionary with idenifiers replace by their equivalent URIs or None
                if an error was encountered.
        """
        dataset_id = prepared_dict["dataset"]
        datasets = self.overseer.get_object_uri("dataset", dataset_id)
        # TODO check only single return log error and return None if not
        prepared_dict["dataset"] = datasets[0]
        return prepared_dict
